# [PackageDev] target_format: plist, ext: tmLanguage
name: GFON (GameFeeder Object Notation)
scopeName: source.gfon
fileTypes: [gfon]
foldingStartMarker: >-
  (?x)       # turn on extended mode
    ^        # a line beginning with
    \s*      # some optional space
    [{\[]    # the start of an object or array
    (?!      # but not followed by
      .*     # whatever
      [}\]]  # and the close of an object or array
      ,?     # an optional comma
      \s*    # some optional space
      $      # at the end of the line
    )
    |        # ...or...
    [{\[]    # the start of an object or array
    \s*      # some optional space
    $        # at the end of the line
foldingStopMarker: >-
  (?x)     # turn on extended mode
    ^      # a line beginning with
    \s*    # some optional space
    [}\]]  # and the close of an object or array
keyEquivalent: ^~J

patterns:
  - include: "#value"

repository:
  # JSON-like arrays
  array:
    name: meta.structure.array.gfon
    begin: \[
    beginCaptures:
      "0": { name: punctuation.definition.array.begin.gfon }
    end: \]
    endCaptures:
      "0": { name: punctuation.definition.array.end.gfon }
    patterns:
      - include: "#value"
      - name: punctuation.separator.array.gfon
        match: ","
      - name: invalid.illegal.expected-array-separator.gfon
        match: '[^\s\]]'

  # Comments
  comments:
    patterns:
      # Documentation comments, /** ... */
      - name: comment.block.documentation.gfon
        begin: /\*\*
        end: \*/
        captures:
          "0": { name: punctuation.definition.comment.gfon }
      # Block comments, /* ... */
      - name: comment.block.gfon
        begin: /\*
        end: \*/
        captures:
          "0": { name: punctuation.definition.comment.gfon }
      # Inline comments, // ...
      - name: comment.line.double-slash.js
        match: (//).*$\n?
        captures:
          "1": { name: punctuation.definition.comment.gfon }

  # Constant values, true, false, null
  constant:
    name: constant.language.gfon
    match: \b(?:true|false|null)\b

  # Numbers, 123, 32.4, etc.
  number:
    name: constant.numeric.gfon
    match: >-
      (?x)        # turn on extended mode
        -?        # an optional minus
        (?:
          0       # a zero
          |       # ...or...
          [1-9]   # a 1-9 character
          \d*     # followed by zero or more digits
        )
        (?:
          (?:
            \.    # a period
            \d+   # followed by one or more digits
          )?
          (?:
            [eE]  # an e character
            [+-]? # followed by an option +/-
            \d+   # followed by one or more digits
          )?      # make exponent optional
        )?        # make decimal portion optional

  # JSON-like objects
  object:
    name: meta.structure.dictionary.gfon
    begin: \{
    beginCaptures:
      "0": { name: punctuation.definition.dictionary.begin.gfon }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.dictionary.end.gfon }
    patterns:
      - include: "#key"
      - include: "#comments"
      - name: meta.structure.dictionary.value.gfon
        begin: ":"
        beginCaptures:
          "0": { name: punctuation.separator.dictionary.key-value.gfon }
        end: (,)|(?=\})
        endCaptures:
          "1": { name: punctuation.separator.dictionary.pair.gfon }
        patterns:
          - include: "#value"
          - name: invalid.illegal.expected-dictionary-separator.gfon
            match: '[^\s,]'
      - name: invalid.illegal.expected-dictionary-separator.gfon
        match: '[^\s\}]'

  # Strings, double- or single-quoted
  string:
    patterns:
      - include: "#double-quoted-string"
      - include: "#single-quoted-string"

  # Double-quoted string, "..."
  double-quoted-string:
    name: string.quoted.double.gfon
    begin: '"'
    beginCaptures:
      "0": { name: punctuation.definition.string.begin.gfon }
    end: '"'
    endCaptures:
      "0": { name: punctuation.definition.string.end.gfon }
    patterns:
      - name: constant.character.escape.gfon
        match: >-
          (?x)                # turn on extended mode
            \\                # a literal backslash
            (?:               # ...followed by...
              ["\\/bfnrt]     # one of these characters
              |               # ...or...
              u               # a u
              [0-9a-fA-F]{4}) # and four hex digits
      - name: invalid.illegal.unrecognized-string-escape.gfon
        match: \\.

  # Single-quoted string, '...'
  single-quoted-string:
    name: string.quoted.single.gfon
    begin: "'"
    beginCaptures:
      "0": { name: punctuation.definition.string.begin.gfon }
    end: "'"
    endCaptures:
      "0": { name: punctuation.definition.string.end.gfon }
    patterns:
      - name: constant.character.escape.gfon
        match: >-
          (?x)                # turn on extended mode
            \\                # a literal backslash
            (?:               # ...followed by...
              ['\\/bfnrt]     # one of these characters
              |               # ...or...
              u               # a u
              [0-9a-fA-F]{4}) # and four hex digits
      - name: invalid.illegal.unrecognized-string-escape.gfon
        match: \\.

  # Object key; Same syntax as strings, but different tokens
  key:
    patterns:
      - include: "#double-quoted-key"
      - include: "#single-quoted-key"

  # Double quoted object key; Same syntax as strings, but different tokens
  double-quoted-key:
    name: support.type.property-name.quoted.double.gfon
    begin: '"'
    beginCaptures:
      "0": { name: punctuation.support.type.property-name.begin.gfon }
    end: '"'
    endCaptures:
      "0": { name: punctuation.support.type.property-name.end.gfon }
    patterns:
      - name: constant.character.escape.gfon
        match: >-
          (?x)                # turn on extended mode
            \\                # a literal backslash
            (?:               # ...followed by...
              ["\\/bfnrt]     # one of these characters
              |               # ...or...
              u               # a u
              [0-9a-fA-F]{4}) # and four hex digits
      - name: invalid.illegal.unrecognized-string-escape.gfon
        match: \\.

  # Single quoted object key; Same syntax as strings, but different tokens
  single-quoted-key:
    name: support.type.property-name.quoted.single.gfon
    begin: "'"
    beginCaptures:
      "0": { name: punctuation.support.type.property-name.begin.gfon }
    end: "'"
    endCaptures:
      "0": { name: punctuation.support.type.property-name.end.gfon }
    patterns:
      - name: constant.character.escape.gfon
        match: >-
          (?x)                # turn on extended mode
            \\                # a literal backslash
            (?:               # ...followed by...
              ['\\/bfnrt]     # one of these characters
              |               # ...or...
              u               # a u
              [0-9a-fA-F]{4}) # and four hex digits
      - name: invalid.illegal.unrecognized-string-escape.gfon
        match: \\.

  # Colors
  color:
    name: constant.other.color.rgb-value.hex.gfon
    match: "#[0-9a-fA-F]{6}"

  # Regular expressions
  # regexp syntax is taken from https://github.com/atom/language-javascript/
  regex:
    name: string.regexp.gfon
    begin: "[/]"
    beginCaptures:
      "0": { name: punctuation.definition.string.begin.gfon }
    end: (/)([gimsuy]*)
    endCaptures:
      "1": { name: punctuation.definition.string.end.gfon }
      "2": { name: keyword.other.gfon }
    patterns:
      - include: "#regexp"

  regexp:
    patterns:
      - name: keyword.control.anchor.regexp
        match: \\[bB]|\^|\$
      - match: \\[1-9]\d*|\\k<([a-zA-Z_$][\w$]*)>
        captures:
          "0": { name: keyword.other.back-reference.regexp }
          "1": { name: variable.other.regexp }
      - name: keyword.operator.quantifier.regexp
        match: '[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??'
      - name: keyword.operator.or.regexp
        match: \|
      - name: meta.group.assertion.regexp
        begin: (\()((\?=)|(\?!)|(\?<=)|(\?<!))
        beginCaptures:
          "1": { name: punctuation.definition.group.regexp }
          "2": { name: punctuation.definition.group.assertion.regexp }
          "3": { name: meta.assertion.look-ahead.regexp }
          "4": { name: meta.assertion.negative-look-ahead.regexp }
          "5": { name: meta.assertion.look-behind.regexp }
          "6": { name: meta.assertion.negative-look-behind.regexp }
        end: (\))
        endCaptures:
          "1": { name: punctuation.definition.group.regexp }
        patterns:
          - include: "#regexp"
      - name: meta.group.regexp
        begin: \((?:(\?:)|(?:\?<([a-zA-Z_$][\w$]*)>))?
        beginCaptures:
          "0": { name: punctuation.definition.group.regexp }
          "1": { name: punctuation.definition.group.no-capture.regexp }
          "2": { name: variable.other.regexp }
        end: \)
        endCaptures:
          "0": { name: punctuation.definition.group.regexp }
        patterns:
          - include: "#regexp"
      - name: constant.other.character-class.set.regexp
        begin: (\[)(\^)?
        beginCaptures:
          "1": { name: punctuation.definition.character-class.regexp }
          "2": { name: keyword.operator.negation.regexp }
        end: (\])
        endCaptures:
          "1": { name: punctuation.definition.character-class.regexp }
        patterns:
          - name: constant.other.character-class.range.regexp
            match: (?:.|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))
            captures:
              "1": { name: constant.character.numeric.regexp }
              "2": { name: constant.character.control.regexp }
              "3": { name: constant.character.escape.backslash.regexp }
              "4": { name: constant.character.numeric.regexp }
              "5": { name: constant.character.control.regexp }
              "6": { name: constant.character.escape.backslash.regexp }
          - include: "#regex-character-class"
      - include: "#regex-character-class"

  regex-character-class:
    patterns:
      - name: constant.other.character-class.regexp.gfon
        match: \\[wWsSdDtrnvf]|\.
      - name: constant.character.numeric.regexp.gfon
        match: \\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})
      - name: constant.character.control.regexp.gfon
        match: \\c[A-Z]
      - name: constant.character.escape.backslash.regexp.gfon
        match: \\.

  # the 'value' diagram at http://json.org
  value:
    patterns:
      - include: "#constant"
      - include: "#number"
      - include: "#color"
      - include: "#string"
      - include: "#array"
      - include: "#object"
      - include: "#comments"
      - include: "#regex"
